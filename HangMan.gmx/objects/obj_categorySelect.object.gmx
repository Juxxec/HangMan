<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dropdown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_drawable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// List of item in the drop down
m_TextList = ds_list_create();
// The font of the text
m_Font = -1;
// The color of the text
m_FontColor = c_white;
// Surface containing the drop down list
m_ListSurface = -1;
// The color of an odd item
m_Color1 = -1;
// The color of an even item
m_Color2 = -1;
// Width of the menu
m_Width = 0;
// Height of one element from the list
m_Height = 0;
// Items to show per page
m_ItemsPerPage = 4;
// Position in the list
m_Position = 0;
// Border thickness
m_Border = 5;
// Border color
m_BorderColor = c_white;
// Text to display above the menu
m_Text = "";
// The text font color
m_TextFontColor = "";
// Font of the text
m_TextFont = -1;

//-------------------------------------------
// Implementation specific
m_PrevMouseX = 0;
m_PrevMouseY = 0;
isInit = false;
m_Time = 0;
m_Pressed = false;
alarm[0] = 1;

global.g_Pause = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isInit = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var height = min(m_ItemsPerPage, ds_list_size(m_TextList)) * m_Height;

if (mouse_check_button_pressed(mb_left))
{   
    if (mouse_x &gt;= x - m_Width / 2 * m_Scale &amp;&amp;
        mouse_x &lt;= x + m_Width / 2 * m_Scale &amp;&amp;
        mouse_y &gt;= y - height / 2 * m_Scale &amp;&amp;
        mouse_y &lt;= y + height / 2 * m_Scale)
    {
        m_PrevMouseY = mouse_y;
        m_Time = 0;
        m_Pressed = true;
        exit;
    }
}
else if (mouse_check_button(mb_left) &amp;&amp; m_Pressed)
{
    m_Time ++;
    
    // Check how much the user has moved
    var diffy = m_PrevMouseY - mouse_y;
        
    m_Position += diffy;
        
    height = min(m_ItemsPerPage, ds_list_size(m_TextList)) * m_Height;
        
    if (m_Position &lt; 0) m_Position = 0;
    if (m_Position &gt; surface_get_height(m_ListSurface) - height)
        m_Position = surface_get_height(m_ListSurface) - height;
        
    m_PrevMouseY = mouse_y;
}
else if (mouse_check_button_released(mb_left))
{
    if (mouse_x &gt;= x - m_Width / 2 * m_Scale &amp;&amp;
        mouse_x &lt;= x + m_Width / 2 * m_Scale &amp;&amp;
        mouse_y &gt;= y - height / 2 * m_Scale &amp;&amp;
        mouse_y &lt;= y + height / 2 * m_Scale)
    {
        if (m_Time &lt; 10)
        {
            height = min(ds_list_size(m_TextList), m_ItemsPerPage) * m_Height;
            var index = (floor(m_Position / m_Height) + floor((mouse_y - y + height / 2) / m_Height));
            scr_SendMessage(MSG_CATEGORY, 3000 + index);
        }
    }
    m_Pressed = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(m_ListSurface))
{
    var height = m_Height * min(m_ItemsPerPage, ds_list_size(m_TextList));
    // Draw border
    draw_set_color(m_BorderColor);
    draw_rectangle(x - m_Width / 2 - m_Border, 
                   y - height / 2 - string_height(m_Text) - 12 - m_Border,
                   x + m_Width / 2 + m_Border,
                   y + height / 2 + m_Border, false);
    
    // Draw text
    draw_set_color(m_TextFontColor);
    draw_set_font(m_TextFont);
    draw_text(x - m_Width / 2 + 5,
              y - height / 2 - string_height(m_Text) - 6,
              m_Text);
              
                   
    // Draw list menu
    draw_set_color(m_FontColor);
    draw_set_font(m_Font);
    draw_surface_part(m_ListSurface, 0, m_Position, m_Width, 
        height, x - m_Width / 2,
        y - height / 2);
}

draw_text(0, 0, string(m_Position));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!isInit)
    exit;

var width = m_Width * m_Scale;
var height = m_Height * min(m_ItemsPerPage, ds_list_size(m_TextList));    

// Create a surface to hold all of the items
if (!surface_exists(m_ListSurface))
{
    m_ListSurface = surface_create(width, height);
}

// Draw the items to the surface
var curH = 0;
surface_set_target(m_ListSurface);
draw_clear_alpha(c_black, 0);
        
for (var j = 0; j &lt; min(m_ItemsPerPage, ds_list_size(m_TextList)); j ++)
{
    var text = ds_list_find_value(m_TextList, j);
    if (j mod 2 != 0)
        draw_set_color(m_Color2);
        else
    draw_set_color(m_Color1);
                
    draw_rectangle(0, curH, width, curH + m_Height * m_Scale, false); 
                
    draw_set_font(m_Font);
    draw_set_color(m_FontColor);
    draw_text(5, curH + (m_Height / 2 - string_height(text) / 2) * m_Scale, text);
                
    curH += m_Height * m_Scale;
}
        
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// List of item in the drop down
m_TextList = ds_list_create();
// The font of the text
m_Font = -1;
// The color of the text
m_FontColor = c_white;
// Surface containing the drop down list
m_ListSurface = -1;
// The color of an odd item
m_Color1 = -1;
// The color of an even item
m_Color2 = -1;
// Width of the menu
m_Width = 0;
// Height of one element from the list
m_Height = 0;
// Items to show per page
m_ItemsPerPage = 4;

//-------------------------------------------
// Implementation specific
m_PrevMouseX = 0;
m_PrevMouseY = 0;
m_Pressed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m_Pressed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_check_button_pressed(mb_left))
{
    var height = min(m_ItemsPerPage, ds_list_size(m_TextList)) * m_Height;
    if (mouse_x &gt;= x - m_Width / 2 * m_Scale &amp;&amp;
        mouse_x &lt;= x + m_Width / 2 * m_Scale &amp;&amp;
        mouse_y &gt;= y - height / 2 * m_Scale &amp;&amp;
        mouse_y &lt;= y + height / 2 * m_Scale)
    {
        m_MousePrevY = mouse_y;
        m_Pressed = true;
        alarm[0] = 10;
    }
}
else if (mouse_check_button(mb_left) &amp;&amp; m_Pressed == false)
{
    // Check how much the user has moved
    var diffy = m_MousePrevY - mouse_y;
    
    m_Position += diffy;
    
    var height = min(m_ItemsPerPage, ds_list_size(m_TextList)) * m_Height;
    
    if (m_Position &lt; 0) m_Position = 0;
    if (m_Position &gt; surface_get_height(m_ListSurface) - height)
        m_Position = surface_get_height(m_ListSurface) - height;
    
    m_MouvsePrevY = mouse_y;
}
else if (mouse_check_button(mb_left) &amp;&amp; m_Pressed == true)
{
    if (m_Pressed == true)
    {
        var height = min(m_ItemsPerPage, ds_list_size(m_TextList)) * m_Height;
        show_message((mouse_y - y - height / 2) / min(m_ItemsPerPage, ds_list_size(m_TextList)));
    }
    else
        m_Pressed = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Create a surface to hold all of the items
if (!surface_exists(m_ListSurface))
{
    var width = m_Width * m_Scale;
    var height = m_Height * min(m_ItemsPerPage, ds_list_size(m_TextList));
    m_ListSurface = surface_create(width, height);
}

// Draw the items to the surface
var curH = 0;
surface_set_target(m_ListSurface);
draw_clear_alpha(c_black, 0);
        
for (var j = 0; j &lt; ds_list_size(m_TextList); j ++)
{
    var text = ds_list_find_value(m_TextList, j);
    if (j mod 2 != 0)
        draw_set_color(m_Color2);
        else
    draw_set_color(m_Color1);
                
    draw_rectangle(0, curH, width, curH + m_Height * m_Scale, false); 
                
    draw_set_font(m_Font);
    draw_set_color(m_FontColor);
    draw_text(5, curH + (m_Width / 2 - string_height(text) / 2) * m_Scale, text);
                
    curH +=m_Height * m_Scale;
}
        
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_render</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Detect screen dimentions
switch (os_type)
{
    case os_windows:
    {
        global.g_Width = window_get_width();
        global.g_Height = window_get_height();
        break;
    }
    
    case os_android:
    {
        global.g_Width = display_get_width();
        global.g_Height = display_get_height();
        break;
    }
}

// For debbuging
global.g_Width = 480;
global.g_Height = 800;

// Calculate aspect ration
global.g_AspectRatio = global.g_Height / global.g_Width;

// The dimentions of the game
global.g_FrameWidth = 480;
global.g_FrameHeight = 800;

// Calculate the scale factor
global.g_ScaleX = global.g_Width / global.g_FrameWidth;
global.g_ScaleY = global.g_Height / global.g_FrameHeight;

// Create a frame buffer
global.g_FrameBuffer = surface_create(global.g_FrameWidth, global.g_FrameHeight);
view_surface_id[0] = global.g_FrameBuffer;

// Transitions
global.g_Fraction = 0;
global.g_Transition = false;
global.g_NextState = -1;
global.g_TransitionSpeed = 0.5 / room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check whetrher the frame buffer was destroyed for
// some reason (Android: screen lock, or call)
if (!surface_exists(global.g_FrameBuffer))
{
    global.g_FrameBuffer = surface_create(global.g_FrameWidth, global.g_FrameHeight);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(global.g_FrameBuffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the frame buffer
draw_surface_ext(global.g_FrameBuffer, 0, 0, global.g_ScaleX, global.g_ScaleY, image_angle, c_white, 1.0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Create a list of objects to render
var renderList = ds_list_create();

// Add all of the visible objects to the render list
for (var i = 0; i &lt; instance_number(obj_drawable); i += 1)
{
    // Find the i-th instance
    var inst = instance_find(obj_drawable, i);
    
    // If it is visible add it to the list
    if (inst.visible == true &amp;&amp; inst.m_Alpha &gt; 0.0)
        ds_list_add(renderList, instance_find(obj_drawable, i));
}

// Sort the list by depth
//util_QuickSort(0, ds_list_size(renderList), renderList);

draw_set_color(c_white);
draw_set_alpha(1);

for (var i = 0; i &lt; ds_list_size(renderList); i += 1)
{
    // If the instance exists
    var inst = ds_list_find_value(renderList, i);
    
    // Render the instance
    if (instance_exists(inst))
    {
         with (inst) { event_perform(ev_other, ev_user0); }
    }
}

if (global.g_Transition == true)
{      
    draw_set_color(c_black);
    draw_set_alpha(sin(degtorad(180 * global.g_Fraction)));
    draw_rectangle(0, 0, global.g_FrameWidth, global.g_FrameHeight, false);
    draw_set_alpha(1);
    draw_set_color(c_white);

    if (global.g_Fraction &gt;= 0.5)
    {
        if (global.g_State != global.g_NextState)
        {
            script_execute(global.g_StateInfo[global.g_State, 1]);
            global.g_State = global.g_NextState;
            script_execute(global.g_StateInfo[global.g_NextState, 0]);
        }
    }
    
    if (global.g_Fraction &gt;= 1.0)
    {
        global.g_Transition = false;
        global.g_Fraction = 0;
        exit;
    }
    
    global.g_Fraction += global.g_TransitionSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
